// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth/auth.proto

package auth

import (
	fmt "fmt"
	_ "github.com/Mikhalevich/filesharing/pkg/proto/types"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AuthService service

func NewAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AuthService service

type AuthService interface {
	Create(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	Auth(ctx context.Context, in *AuthUserRequest, opts ...client.CallOption) (*AuthUserResponse, error)
	AuthPublicUser(ctx context.Context, in *AuthPublicUserRequest, opts ...client.CallOption) (*AuthPublicUserResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Create(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Create", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Auth(ctx context.Context, in *AuthUserRequest, opts ...client.CallOption) (*AuthUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Auth", in)
	out := new(AuthUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) AuthPublicUser(ctx context.Context, in *AuthPublicUserRequest, opts ...client.CallOption) (*AuthPublicUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.AuthPublicUser", in)
	out := new(AuthPublicUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	Create(context.Context, *CreateUserRequest, *CreateUserResponse) error
	Auth(context.Context, *AuthUserRequest, *AuthUserResponse) error
	AuthPublicUser(context.Context, *AuthPublicUserRequest, *AuthPublicUserResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		Create(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		Auth(ctx context.Context, in *AuthUserRequest, out *AuthUserResponse) error
		AuthPublicUser(ctx context.Context, in *AuthPublicUserRequest, out *AuthPublicUserResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) Create(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AuthServiceHandler.Create(ctx, in, out)
}

func (h *authServiceHandler) Auth(ctx context.Context, in *AuthUserRequest, out *AuthUserResponse) error {
	return h.AuthServiceHandler.Auth(ctx, in, out)
}

func (h *authServiceHandler) AuthPublicUser(ctx context.Context, in *AuthPublicUserRequest, out *AuthPublicUserResponse) error {
	return h.AuthServiceHandler.AuthPublicUser(ctx, in, out)
}
